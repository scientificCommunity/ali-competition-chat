buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/google" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter" }
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
        classpath "org.postgresql:postgresql:9.4.1212"
        classpath "nu.studer:gradle-jooq-plugin:4.1"
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'maven'
}

apply plugin: "nu.studer.jooq"
apply plugin: "kotlin"
apply plugin: "org.jetbrains.kotlin.kapt"

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

group 'org.baichuan.chat'
version '1.0-SNAPSHOT'
def vertxVersion = '4.1.1'
def jooqVersion = "3.12.3"

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://jitpack.io' }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/google" }
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter" }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "io.vertx:vertx-core:${vertxVersion}"
    implementation "io.vertx:vertx-rx-java2:${vertxVersion}"
    kapt "io.vertx:vertx-rx-java2-gen:${vertxVersion}"

    kapt "io.vertx:vertx-web-api-service:${vertxVersion}"
    implementation "io.vertx:vertx-auth-jwt:${vertxVersion}"
    implementation "io.vertx:vertx-web-api-contract:${vertxVersion}"
    implementation "io.vertx:vertx-lang-kotlin:${vertxVersion}"
    implementation "io.vertx:vertx-lang-kotlin-coroutines:${vertxVersion}"

    //db
    implementation "io.vertx:vertx-pg-client:${vertxVersion}"
    implementation "io.vertx:vertx-sql-client-templates:${vertxVersion}"
    implementation "io.vertx:vertx-redis-client:${vertxVersion}"


    implementation "io.vertx:vertx-service-proxy:${vertxVersion}"
//    implementation "io.vertx:vertx-web-proxy:${vertxVersion}"
//    kapt "io.vertx:vertx-web-proxy:${vertxVersion}"

    implementation "io.vertx:vertx-codegen:${vertxVersion}"
    implementation "io.vertx:vertx-codegen:${vertxVersion}:processor"

    kapt "io.vertx:vertx-service-proxy:$vertxVersion"
    implementation "io.vertx:vertx-web:${vertxVersion}"
    implementation "io.vertx:vertx-web-client:${vertxVersion}"
    implementation "io.vertx:vertx-web-openapi:${vertxVersion}"
    implementation "io.vertx:vertx-web-api-service:${vertxVersion}"
    //implementation "io.vertx:vertx-config-yaml:${vertxVersion}"

    //jooq
    implementation "org.jooq:jooq:${jooqVersion}"
    implementation "org.jooq:jooq-meta:${jooqVersion}"
    implementation "org.jooq:jooq-codegen:${jooqVersion}"
    //升级至13
//    implementation "org.postgresql:postgresql:9.4.1212"
    // 对于psql 13
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23'
    //服务端密码验证方式是scram-sha-256时启用该依赖。参见pg_hba.conf
    //implementation("com.ongres.scram:client:2.1")

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    implementation "ch.qos.logback:logback-classic:1.2.3"

    idea {
        module {
            sourceDirs += file("src/generated")
            sourceDirs += file("src/generated/main/java")
            sourceDirs += file("src/generated/main/grpc")
            generatedSourceDirs += file("src/generated")
            generatedSourceDirs += file("src/generated/main/java")
        }
    }
}


import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

def props = new Properties()
props.load(new FileReader(file("./jooq.properties")))
GenerationTool.generate(new Configuration()
        .withJdbc(new Jdbc()
                .withDriver('org.postgresql.Driver')
                .withUrl("jdbc:postgresql://${props.getProperty("host")}:${props.getProperty("port")}/${props.getProperty("database")}")
                .withUser(props.getProperty("username"))
                .withPassword(props.getProperty("password")))
        .withGenerator(new Generator()
                .withDatabase(new Database()
                        .withName("org.jooq.meta.postgres.PostgresDatabase")
                        .withInputSchema("public")
                        .withIncludes(".*")
                        .withDateAsTimestamp(true))
                .withGenerate(new Generate()
                        .withPojos(true)
                        .withDaos(true)
                        .withJavaTimeTypes(true)
                        .withCommentsOnKeys(true))
                .withTarget(new Target()
                        .withPackageName('org.baichuan.chat.jooq')
                        .withDirectory('src/generated/main/java')
                        .withEncoding("UTF-8"))))
sourceSets {
    main {
        java {
            srcDir 'src/generated/main/java'
        }
        resources {
            srcDir "src/main/resources"
        }
    }
}

//processResources {
//    from('src/main/resources') {
//        include '**/*.xml'
//        include '**/*.yaml'
//    }
//}
jar {
    manifest {
        attributes 'Main-Class': 'org.baichuan.chat.MainKt'
    }
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
